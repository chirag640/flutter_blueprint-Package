/// Analyzer for monitoring and tracking performance metrics
library;

import 'dart:io';
import 'package:path/path.dart' as path;
import '../config/performance_config.dart';
import '../utils/logger.dart';

/// Analyzes and tracks performance metrics for Flutter applications
class PerformanceAnalyzer {
  final PerformanceConfig _config;
  final Logger _logger;
  final String _projectPath;
  final List<PerformanceMetric> _metrics = [];

  PerformanceAnalyzer({
    required PerformanceConfig config,
    required String projectPath,
    Logger? logger,
  })  : _config = config,
        _projectPath = projectPath,
        _logger = logger ?? Logger();

  /// Records a performance metric
  void recordMetric(PerformanceMetric metric) {
    if (!_config.enabled) return;

    _metrics.add(metric);
    _checkThresholds(metric);
  }

  /// Checks if a metric exceeds configured thresholds
  void _checkThresholds(PerformanceMetric metric) {
    final alerts = _config.alerts;
    String? warning;

    switch (metric.name) {
      case 'screen_load_time':
        if (metric.value > alerts.slowScreenThreshold) {
          warning =
              'Screen load time (${metric.value.toStringAsFixed(0)}ms) exceeds threshold (${alerts.slowScreenThreshold}ms)';
        }
        break;
      case 'api_response_time':
        if (metric.value > alerts.slowApiThreshold) {
          warning =
              'API response time (${metric.value.toStringAsFixed(0)}ms) exceeds threshold (${alerts.slowApiThreshold}ms)';
        }
        break;
      case 'app_start_time':
        if (metric.value > alerts.slowStartupThreshold) {
          warning =
              'App startup time (${metric.value.toStringAsFixed(0)}ms) exceeds threshold (${alerts.slowStartupThreshold}ms)';
        }
        break;
      case 'frame_render_time':
        if (metric.value > alerts.frameDropThreshold) {
          warning =
              'Frame render time (${metric.value.toStringAsFixed(0)}ms) exceeds threshold (${alerts.frameDropThreshold}ms)';
        }
        break;
    }

    if (warning != null) {
      _logger.warning('‚ö†Ô∏è  Performance Alert: $warning');
    }
  }

  /// Generates performance monitoring setup code for a Flutter project
  Future<String> generatePerformanceSetupCode() async {
    if (!_config.enabled) {
      return '// Performance monitoring is disabled';
    }

    final buffer = StringBuffer();
    buffer.writeln('// Auto-generated performance monitoring setup');
    buffer.writeln('// Generated by flutter_blueprint');
    buffer.writeln();
    buffer.writeln("import 'package:flutter/foundation.dart';");
    buffer.writeln("import 'package:flutter/material.dart';");
    buffer.writeln();

    // Performance tracker class
    buffer.writeln('/// Performance monitoring utility');
    buffer.writeln('class PerformanceTracker {');
    buffer.writeln(
        '  static final PerformanceTracker _instance = PerformanceTracker._internal();');
    buffer.writeln('  factory PerformanceTracker() => _instance;');
    buffer.writeln('  PerformanceTracker._internal();');
    buffer.writeln();
    buffer.writeln('  final Map<String, DateTime> _startTimes = {};');
    buffer.writeln('  final List<PerformanceMetric> _metrics = [];');
    buffer.writeln();

    if (_config.tracking.appStartTime) {
      buffer.writeln('  /// Marks the app startup time');
      buffer.writeln('  void markAppStart() {');
      buffer.writeln("    _startTimes['app_start'] = DateTime.now();");
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  /// Records the app startup completion');
      buffer.writeln('  void recordAppStartComplete() {');
      buffer.writeln("    final start = _startTimes['app_start'];");
      buffer.writeln('    if (start != null) {');
      buffer.writeln(
          '      final duration = DateTime.now().difference(start).inMilliseconds;');
      buffer.writeln(
          "      _recordMetric('app_start_time', duration.toDouble());");
      buffer.writeln('    }');
      buffer.writeln('  }');
      buffer.writeln();
    }

    if (_config.tracking.screenLoadTime) {
      buffer.writeln('  /// Marks the start of screen load');
      buffer.writeln('  void markScreenLoadStart(String screenName) {');
      buffer
          .writeln("    _startTimes['screen_\$screenName'] = DateTime.now();");
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  /// Records screen load completion');
      buffer.writeln('  void recordScreenLoadComplete(String screenName) {');
      buffer.writeln("    final start = _startTimes['screen_\$screenName'];");
      buffer.writeln('    if (start != null) {');
      buffer.writeln(
          '      final duration = DateTime.now().difference(start).inMilliseconds;');
      buffer.writeln(
          "      _recordMetric('screen_load_time', duration.toDouble(), metadata: {'screen': screenName});");
      buffer.writeln("      _startTimes.remove('screen_\$screenName');");
      buffer.writeln('    }');
      buffer.writeln('  }');
      buffer.writeln();
    }

    if (_config.tracking.apiResponseTime) {
      buffer.writeln('  /// Records API response time');
      buffer.writeln(
          '  void recordApiResponse(String endpoint, int durationMs) {');
      buffer.writeln(
          "    _recordMetric('api_response_time', durationMs.toDouble(), metadata: {'endpoint': endpoint});");
      buffer.writeln('  }');
      buffer.writeln();
    }

    if (_config.tracking.frameRenderTime) {
      buffer.writeln('  /// Records frame render time');
      buffer.writeln('  void recordFrameTime(Duration duration) {');
      buffer.writeln(
          "    _recordMetric('frame_render_time', duration.inMicroseconds / 1000.0);");
      buffer.writeln('  }');
      buffer.writeln();
    }

    buffer.writeln(
        '  void _recordMetric(String name, double value, {Map<String, dynamic>? metadata}) {');
    buffer.writeln('    final metric = PerformanceMetric(');
    buffer.writeln('      name: name,');
    buffer.writeln('      value: value,');
    buffer.writeln('      timestamp: DateTime.now(),');
    buffer.writeln('      metadata: metadata,');
    buffer.writeln('    );');
    buffer.writeln('    _metrics.add(metric);');
    buffer.writeln('    _checkThresholds(metric);');
    buffer.writeln();
    buffer.writeln('    if (kDebugMode) {');
    buffer.writeln('      debugPrint("üìä Performance: \${metric.format()}");');
    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln();

    // Add threshold checking
    buffer.writeln('  void _checkThresholds(PerformanceMetric metric) {');
    buffer.writeln('    String? warning;');
    buffer.writeln('    switch (metric.name) {');
    if (_config.tracking.screenLoadTime) {
      buffer.writeln("      case 'screen_load_time':");
      buffer.writeln(
          '        if (metric.value > ${_config.alerts.slowScreenThreshold}) {');
      buffer.writeln(
          '          warning = "Slow screen load: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }
    if (_config.tracking.apiResponseTime) {
      buffer.writeln("      case 'api_response_time':");
      buffer.writeln(
          '        if (metric.value > ${_config.alerts.slowApiThreshold}) {');
      buffer.writeln(
          '          warning = "Slow API response: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }
    if (_config.tracking.appStartTime) {
      buffer.writeln("      case 'app_start_time':");
      buffer.writeln(
          '        if (metric.value > ${_config.alerts.slowStartupThreshold}) {');
      buffer.writeln(
          '          warning = "Slow app startup: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }
    buffer.writeln('    }');
    buffer.writeln('    if (warning != null && kDebugMode) {');
    buffer.writeln('      debugPrint("‚ö†Ô∏è  Performance Alert: \$warning");');
    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln();

    buffer.writeln('  /// Gets all recorded metrics');
    buffer.writeln(
        '  List<PerformanceMetric> getMetrics() => List.unmodifiable(_metrics);');
    buffer.writeln();
    buffer.writeln('  /// Clears all recorded metrics');
    buffer.writeln('  void clearMetrics() => _metrics.clear();');
    buffer.writeln('}');
    buffer.writeln();

    // PerformanceMetric class
    buffer.writeln('/// Represents a performance metric measurement');
    buffer.writeln('class PerformanceMetric {');
    buffer.writeln('  final String name;');
    buffer.writeln('  final double value;');
    buffer.writeln('  final DateTime timestamp;');
    buffer.writeln('  final Map<String, dynamic>? metadata;');
    buffer.writeln();
    buffer.writeln('  const PerformanceMetric({');
    buffer.writeln('    required this.name,');
    buffer.writeln('    required this.value,');
    buffer.writeln('    required this.timestamp,');
    buffer.writeln('    this.metadata,');
    buffer.writeln('  });');
    buffer.writeln();
    buffer.writeln('  String format() {');
    buffer
        .writeln('    final metaStr = metadata != null ? " \$metadata" : "";');
    buffer.writeln(
        '    return "\$name: \${value.toStringAsFixed(2)}ms\$metaStr";');
    buffer.writeln('  }');
    buffer.writeln('}');

    return buffer.toString();
  }

  /// Adds performance monitoring to the main.dart file
  Future<void> injectPerformanceMonitoring() async {
    if (!_config.enabled) return;

    final mainFile = File(path.join(_projectPath, 'lib', 'main.dart'));
    if (!await mainFile.exists()) {
      _logger.warning('main.dart not found, skipping performance injection');
      return;
    }

    // Create performance_tracker.dart
    final performanceFile = File(
      path.join(_projectPath, 'lib', 'core', 'performance_tracker.dart'),
    );
    await performanceFile.parent.create(recursive: true);
    final code = await generatePerformanceSetupCode();
    await performanceFile.writeAsString(code);

    _logger.success(
        '‚úÖ Performance monitoring setup created at lib/core/performance_tracker.dart');
  }

  /// Generates a performance report
  PerformanceReport generateReport() {
    return PerformanceReport(
      metrics: List.unmodifiable(_metrics),
      config: _config,
    );
  }

  /// Gets all recorded metrics
  List<PerformanceMetric> get metrics => List.unmodifiable(_metrics);

  /// Clears all recorded metrics
  void clearMetrics() => _metrics.clear();
}

/// Report containing performance analysis results
class PerformanceReport {
  final List<PerformanceMetric> metrics;
  final PerformanceConfig config;

  const PerformanceReport({
    required this.metrics,
    required this.config,
  });

  /// Gets metrics by name
  List<PerformanceMetric> getMetricsByName(String name) {
    return metrics.where((m) => m.name == name).toList();
  }

  /// Calculates average value for a metric
  double? getAverageValue(String metricName) {
    final metricList = getMetricsByName(metricName);
    if (metricList.isEmpty) return null;

    final sum = metricList.fold<double>(0, (sum, m) => sum + m.value);
    return sum / metricList.length;
  }

  /// Calculates maximum value for a metric
  double? getMaxValue(String metricName) {
    final metricList = getMetricsByName(metricName);
    if (metricList.isEmpty) return null;

    return metricList.map((m) => m.value).reduce((a, b) => a > b ? a : b);
  }

  /// Calculates minimum value for a metric
  double? getMinValue(String metricName) {
    final metricList = getMetricsByName(metricName);
    if (metricList.isEmpty) return null;

    return metricList.map((m) => m.value).reduce((a, b) => a < b ? a : b);
  }

  /// Generates a formatted text report
  String toFormattedString() {
    final buffer = StringBuffer();
    buffer.writeln('üìä Performance Report');
    buffer.writeln('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    buffer.writeln();

    if (metrics.isEmpty) {
      buffer.writeln('No metrics recorded.');
      return buffer.toString();
    }

    final metricNames = metrics.map((m) => m.name).toSet();

    for (final name in metricNames) {
      final avg = getAverageValue(name);
      final max = getMaxValue(name);
      final min = getMinValue(name);
      final count = getMetricsByName(name).length;

      buffer.writeln('$name:');
      buffer.writeln('  Count:   $count');
      buffer.writeln('  Average: ${avg?.toStringAsFixed(2)}ms');
      buffer.writeln('  Min:     ${min?.toStringAsFixed(2)}ms');
      buffer.writeln('  Max:     ${max?.toStringAsFixed(2)}ms');
      buffer.writeln();
    }

    return buffer.toString();
  }
}
