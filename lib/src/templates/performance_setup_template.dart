/// Template for performance monitoring setup
library;

import '../config/performance_config.dart';

/// Generates performance monitoring code for Flutter projects
class PerformanceSetupTemplate {
  final PerformanceConfig config;

  const PerformanceSetupTemplate({required this.config});

  /// Generates the performance tracker class
  String generatePerformanceTracker() {
    if (!config.enabled) {
      return '// Performance monitoring is disabled\n';
    }

    final buffer = StringBuffer();

    buffer.writeln('// Auto-generated performance monitoring setup');
    buffer.writeln('// Generated by flutter_blueprint');
    buffer.writeln("// ignore_for_file: avoid_print");
    buffer.writeln();
    buffer.writeln("import 'package:flutter/foundation.dart';");
    buffer.writeln("import 'package:flutter/material.dart';");
    buffer.writeln();

    // Main PerformanceTracker class
    buffer
        .writeln('/// Performance monitoring utility for tracking app metrics');
    buffer.writeln('class PerformanceTracker {');
    buffer.writeln(
        '  static final PerformanceTracker _instance = PerformanceTracker._internal();');
    buffer.writeln('  factory PerformanceTracker() => _instance;');
    buffer.writeln('  PerformanceTracker._internal();');
    buffer.writeln();
    buffer.writeln('  final Map<String, DateTime> _startTimes = {};');
    buffer.writeln('  final List<PerformanceMetric> _metrics = [];');
    buffer.writeln();

    // App start time tracking
    if (config.tracking.appStartTime) {
      buffer.writeln('  /// Marks the app startup time');
      buffer.writeln('  void markAppStart() {');
      buffer.writeln("    _startTimes['app_start'] = DateTime.now();");
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  /// Records the app startup completion');
      buffer.writeln('  void recordAppStartComplete() {');
      buffer.writeln("    final start = _startTimes['app_start'];");
      buffer.writeln('    if (start != null) {');
      buffer.writeln(
          '      final duration = DateTime.now().difference(start).inMilliseconds;');
      buffer.writeln(
          "      _recordMetric('app_start_time', duration.toDouble());");
      buffer.writeln('    }');
      buffer.writeln('  }');
      buffer.writeln();
    }

    // Screen load time tracking
    if (config.tracking.screenLoadTime) {
      buffer.writeln('  /// Marks the start of screen load');
      buffer.writeln('  void markScreenLoadStart(String screenName) {');
      buffer
          .writeln("    _startTimes['screen_\$screenName'] = DateTime.now();");
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  /// Records screen load completion');
      buffer.writeln('  void recordScreenLoadComplete(String screenName) {');
      buffer.writeln("    final start = _startTimes['screen_\$screenName'];");
      buffer.writeln('    if (start != null) {');
      buffer.writeln(
          '      final duration = DateTime.now().difference(start).inMilliseconds;');
      buffer.writeln(
          "      _recordMetric('screen_load_time', duration.toDouble(), ");
      buffer.writeln("        metadata: {'screen': screenName});");
      buffer.writeln("      _startTimes.remove('screen_\$screenName');");
      buffer.writeln('    }');
      buffer.writeln('  }');
      buffer.writeln();
    }

    // API response time tracking
    if (config.tracking.apiResponseTime) {
      buffer.writeln('  /// Records API response time');
      buffer.writeln(
          '  void recordApiResponse(String endpoint, int durationMs) {');
      buffer.writeln(
          "    _recordMetric('api_response_time', durationMs.toDouble(), ");
      buffer.writeln("      metadata: {'endpoint': endpoint});");
      buffer.writeln('  }');
      buffer.writeln();
    }

    // Frame render time tracking
    if (config.tracking.frameRenderTime) {
      buffer.writeln('  /// Records frame render time');
      buffer.writeln('  void recordFrameTime(Duration duration) {');
      buffer.writeln(
          "    _recordMetric('frame_render_time', duration.inMicroseconds / 1000.0);");
      buffer.writeln('  }');
      buffer.writeln();

      buffer.writeln('  /// Starts monitoring frame rendering performance');
      buffer.writeln('  void startFrameMonitoring() {');
      buffer.writeln(
          '    WidgetsBinding.instance.addTimingsCallback(_onReportTimings);');
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  void _onReportTimings(List<FrameTiming> timings) {');
      buffer.writeln('    for (final timing in timings) {');
      buffer.writeln('      final totalDuration = timing.totalSpan;');
      buffer.writeln('      recordFrameTime(totalDuration);');
      buffer.writeln('    }');
      buffer.writeln('  }');
      buffer.writeln();
    }

    // Core metric recording
    buffer.writeln(
        '  void _recordMetric(String name, double value, {Map<String, dynamic>? metadata}) {');
    buffer.writeln('    final metric = PerformanceMetric(');
    buffer.writeln('      name: name,');
    buffer.writeln('      value: value,');
    buffer.writeln('      timestamp: DateTime.now(),');
    buffer.writeln('      metadata: metadata,');
    buffer.writeln('    );');
    buffer.writeln('    _metrics.add(metric);');
    buffer.writeln('    _checkThresholds(metric);');
    buffer.writeln();
    buffer.writeln('    if (kDebugMode) {');
    buffer.writeln('      debugPrint("üìä Performance: \${metric.format()}");');
    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln();

    // Threshold checking
    buffer.writeln('  void _checkThresholds(PerformanceMetric metric) {');
    buffer.writeln('    String? warning;');
    buffer.writeln('    switch (metric.name) {');

    if (config.tracking.screenLoadTime) {
      buffer.writeln("      case 'screen_load_time':");
      buffer.writeln(
          '        if (metric.value > ${config.alerts.slowScreenThreshold}) {');
      buffer.writeln(
          '          warning = "Slow screen load: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }

    if (config.tracking.apiResponseTime) {
      buffer.writeln("      case 'api_response_time':");
      buffer.writeln(
          '        if (metric.value > ${config.alerts.slowApiThreshold}) {');
      buffer.writeln(
          '          warning = "Slow API response: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }

    if (config.tracking.appStartTime) {
      buffer.writeln("      case 'app_start_time':");
      buffer.writeln(
          '        if (metric.value > ${config.alerts.slowStartupThreshold}) {');
      buffer.writeln(
          '          warning = "Slow app startup: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }

    if (config.tracking.frameRenderTime) {
      buffer.writeln("      case 'frame_render_time':");
      buffer.writeln(
          '        if (metric.value > ${config.alerts.frameDropThreshold}) {');
      buffer.writeln(
          '          warning = "Frame drop detected: \${metric.value.toStringAsFixed(0)}ms";');
      buffer.writeln('        }');
      buffer.writeln('        break;');
    }

    buffer.writeln('    }');
    buffer.writeln('    if (warning != null && kDebugMode) {');
    buffer.writeln('      debugPrint("‚ö†Ô∏è  Performance Alert: \$warning");');
    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln();

    // Utility methods
    buffer.writeln('  /// Gets all recorded metrics');
    buffer.writeln(
        '  List<PerformanceMetric> getMetrics() => List.unmodifiable(_metrics);');
    buffer.writeln();
    buffer.writeln('  /// Clears all recorded metrics');
    buffer.writeln('  void clearMetrics() {');
    buffer.writeln('    _metrics.clear();');
    buffer.writeln('    _startTimes.clear();');
    buffer.writeln('  }');
    buffer.writeln();
    buffer.writeln('  /// Generates a performance report');
    buffer.writeln('  String generateReport() {');
    buffer.writeln('    if (_metrics.isEmpty) return "No metrics recorded";');
    buffer.writeln('    final buffer = StringBuffer();');
    buffer.writeln('    buffer.writeln("üìä Performance Report");');
    buffer.writeln('    buffer.writeln("=" * 40);');
    buffer.writeln(
        '    final metricsByName = <String, List<PerformanceMetric>>{};');
    buffer.writeln('    for (final metric in _metrics) {');
    buffer.writeln(
        '      metricsByName.putIfAbsent(metric.name, () => []).add(metric);');
    buffer.writeln('    }');
    buffer.writeln('    for (final entry in metricsByName.entries) {');
    buffer.writeln(
        '      final values = entry.value.map((m) => m.value).toList();');
    buffer.writeln(
        '      final avg = values.reduce((a, b) => a + b) / values.length;');
    buffer.writeln('      final max = values.reduce((a, b) => a > b ? a : b);');
    buffer.writeln('      final min = values.reduce((a, b) => a < b ? a : b);');
    buffer.writeln('      buffer.writeln("\${entry.key}:");');
    buffer.writeln('      buffer.writeln("  Count: \${values.length}");');
    buffer.writeln(
        '      buffer.writeln("  Avg: \${avg.toStringAsFixed(2)}ms");');
    buffer.writeln(
        '      buffer.writeln("  Min: \${min.toStringAsFixed(2)}ms");');
    buffer.writeln(
        '      buffer.writeln("  Max: \${max.toStringAsFixed(2)}ms");');
    buffer.writeln('    }');
    buffer.writeln('    return buffer.toString();');
    buffer.writeln('  }');
    buffer.writeln('}');
    buffer.writeln();

    // PerformanceMetric class
    buffer.writeln('/// Represents a performance metric measurement');
    buffer.writeln('class PerformanceMetric {');
    buffer.writeln('  final String name;');
    buffer.writeln('  final double value;');
    buffer.writeln('  final DateTime timestamp;');
    buffer.writeln('  final Map<String, dynamic>? metadata;');
    buffer.writeln();
    buffer.writeln('  const PerformanceMetric({');
    buffer.writeln('    required this.name,');
    buffer.writeln('    required this.value,');
    buffer.writeln('    required this.timestamp,');
    buffer.writeln('    this.metadata,');
    buffer.writeln('  });');
    buffer.writeln();
    buffer.writeln('  String format() {');
    buffer
        .writeln('    final metaStr = metadata != null ? " \$metadata" : "";');
    buffer.writeln(
        '    return "\$name: \${value.toStringAsFixed(2)}ms\$metaStr";');
    buffer.writeln('  }');
    buffer.writeln('}');

    return buffer.toString();
  }

  /// Generates example usage documentation
  String generateUsageExample() {
    final buffer = StringBuffer();

    buffer.writeln('# Performance Monitoring Usage');
    buffer.writeln();
    buffer.writeln('## Setup');
    buffer.writeln();
    buffer.writeln(
        'The performance tracker has been automatically configured based on your `blueprint.yaml`.');
    buffer.writeln();
    buffer.writeln('## Initialization');
    buffer.writeln();
    buffer.writeln('In your `main.dart`:');
    buffer.writeln();
    buffer.writeln('```dart');
    buffer.writeln("import 'core/performance_tracker.dart';");
    buffer.writeln();
    buffer.writeln('void main() {');

    if (config.tracking.appStartTime) {
      buffer.writeln('  // Track app startup time');
      buffer.writeln('  PerformanceTracker().markAppStart();');
      buffer.writeln();
    }

    buffer.writeln('  runApp(const MyApp());');
    buffer.writeln();

    if (config.tracking.appStartTime) {
      buffer.writeln('  // Record startup completion');
      buffer.writeln('  WidgetsBinding.instance.addPostFrameCallback((_) {');
      buffer.writeln('    PerformanceTracker().recordAppStartComplete();');
      buffer.writeln('  });');
      buffer.writeln();
    }

    if (config.tracking.frameRenderTime) {
      buffer.writeln('  // Start frame monitoring');
      buffer.writeln('  PerformanceTracker().startFrameMonitoring();');
    }

    buffer.writeln('}');
    buffer.writeln('```');
    buffer.writeln();

    if (config.tracking.screenLoadTime) {
      buffer.writeln('## Tracking Screen Loads');
      buffer.writeln();
      buffer.writeln('```dart');
      buffer.writeln('class MyScreen extends StatefulWidget {');
      buffer.writeln('  @override');
      buffer.writeln('  State<MyScreen> createState() => _MyScreenState();');
      buffer.writeln('}');
      buffer.writeln();
      buffer.writeln('class _MyScreenState extends State<MyScreen> {');
      buffer.writeln('  @override');
      buffer.writeln('  void initState() {');
      buffer.writeln('    super.initState();');
      buffer
          .writeln("    PerformanceTracker().markScreenLoadStart('MyScreen');");
      buffer.writeln('  }');
      buffer.writeln();
      buffer.writeln('  @override');
      buffer.writeln('  void didChangeDependencies() {');
      buffer.writeln('    super.didChangeDependencies();');
      buffer.writeln(
          "    PerformanceTracker().recordScreenLoadComplete('MyScreen');");
      buffer.writeln('  }');
      buffer.writeln('}');
      buffer.writeln('```');
      buffer.writeln();
    }

    if (config.tracking.apiResponseTime) {
      buffer.writeln('## Tracking API Calls');
      buffer.writeln();
      buffer.writeln('```dart');
      buffer.writeln('Future<void> fetchData() async {');
      buffer.writeln('  final stopwatch = Stopwatch()..start();');
      buffer.writeln('  try {');
      buffer.writeln('    final response = await api.get("/endpoint");');
      buffer.writeln('    return response;');
      buffer.writeln('  } finally {');
      buffer.writeln('    stopwatch.stop();');
      buffer.writeln(
          "    PerformanceTracker().recordApiResponse('/endpoint', stopwatch.elapsedMilliseconds);");
      buffer.writeln('  }');
      buffer.writeln('}');
      buffer.writeln('```');
      buffer.writeln();
    }

    buffer.writeln('## Viewing Reports');
    buffer.writeln();
    buffer.writeln('```dart');
    buffer.writeln('// Print performance report');
    buffer.writeln('print(PerformanceTracker().generateReport());');
    buffer.writeln();
    buffer.writeln('// Get raw metrics');
    buffer.writeln('final metrics = PerformanceTracker().getMetrics();');
    buffer.writeln('```');
    buffer.writeln();
    buffer.writeln('## Configuration');
    buffer.writeln();
    buffer.writeln('Alert thresholds configured in `blueprint.yaml`:');
    buffer.writeln();
    buffer.writeln('- Screen load: ${config.alerts.slowScreenThreshold}ms');
    buffer.writeln('- API response: ${config.alerts.slowApiThreshold}ms');
    buffer.writeln('- App startup: ${config.alerts.slowStartupThreshold}ms');
    buffer.writeln('- Frame render: ${config.alerts.frameDropThreshold}ms');

    return buffer.toString();
  }
}
